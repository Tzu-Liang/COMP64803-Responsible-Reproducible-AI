"""!@file find_empty.py
@brief Module containing a class for finding empty cells with cache optimisation.

@details This module contains a class for finding empty cells in a Sudoku grid. Cache optimisation is used to speed up the process of finding empty cells.
The cache is updated whenever a cell is updated in the grid. There are four functions in the class:
- __init__(): Define the Sudoku grid and initialise the cache of empty cells bu calling _initialize_empty_cells_cache().
- _initialize_empty_cells_cache(): Initialises the cache of empty cells in the grid.
- find_empty(): Finds the next empty cell in the grid using the cache.
- update_cell(): Updates a cell in the grid and adjusts the cache of empty cells accordingly.

@author Created by F. Wu on 30/11/2023
"""

class SudokuSolverWithCache:
    def __init__(self, grid):
        """
        @brief Initializes the cache of empty cells in the grid.

        @details The cache of empty cells is generated by calling the _initialize_empty_cells_cache() method.
        The cache of empty cells will be updated whenever a cell is updated in the grid by the update_cell() method.

        @param grid A Sudoku grid (2D list produced from read_grid_file()).
        """
        self.grid = grid
        self.empty_cells_cache = self._initialize_empty_cells_cache()

    def _initialize_empty_cells_cache(self):
        """
        @brief Initializes the cache of empty cells in the grid.

        @details This function will give a list of tuples which contain the coordinates of the empty cells.

        @return List of tuples: Each tuple contains the row and column indices of an empty cell.
        """
        return [(i, j) for i in range(9) for j in range(9) if self.grid[i][j] == 0]

    def find_empty(self):
        """
        @brief Finds the next empty cell in the Sudoku grid using the cache.

        @details Utilizing the aforementioned cache, this method quickly locates the next empty cell in the grid.
        It returns a tuple containing the row and column indices of the found empty cell,
        or None if the grid is fully occupied.

        @return Tuple of (int, int): The row and column indices of the empty cell, or None if no empty cell is found.
        """
        for i in range(9):  # Loop through rows
            for j in range(9):  # Loop through columns
                if self.grid[i][j] == 0:  # Check if the cell is empty
                    return (i, j)  # Return the (row, column) tuple
        return None  # No empty cells found

    def update_cell(self, row, col, value):
        """
        @brief Updates a cell in the grid and adjust the cache of empty cells accordingly.

        @details This function updates the cell at the given row and column indices with the given value.
        The method also adjusts the cache of empty cells accordingly.

        @param row The row index of the cell.
        @param col The column index of the cell.
        @param value The value to place in the cell.
        """
        self.grid[row][col] = value
        if value == 0 and (row, col) not in self.empty_cells_cache:
            self.empty_cells_cache.append((row, col))
        elif value != 0 and (row, col) in self.empty_cells_cache:
            self.empty_cells_cache.remove((row, col))
